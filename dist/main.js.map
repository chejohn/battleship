{"version":3,"file":"main.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;ACAsB;AACa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mDAAmD,kDAAI;AACvD,2BAA2B,kDAAI;AAC/B;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA,SAAS;AACT,sBAAsB;AACtB,KAAK;AACL;;AAEmB;;;;;;;;;;;;;;;;AC1HnB;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC,kBAAkB;AAClB,KAAK;AACL;;AAEc;;;;;;;UChCd;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACN+C;;AAE/C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,SAAS;AACT;;AAEA;AACA;AACA","sources":["webpack://battleship/./src/index.scss","webpack://battleship/./src/GameBoardLibrary.js","webpack://battleship/./src/ShipLibrary.js","webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/webpack/runtime/make namespace object","webpack://battleship/./src/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","import './index.scss';\nimport {Ship} from './ShipLibrary';\n// ship is represented by an 'o' on the gameboard\n// misssed hits are represented by an 'x' on the gameboard\n// attacked ships are represented by an '*' on the gameboard\nconst GameBoardProto = {\n    convertToCoordinates(dataID) {\n        let col;\n        let row;\n        if (dataID % 10 === 0) {\n            col = 9;\n            row = dataID/10 - 1;\n        } \n        else {\n            col = (dataID % 10) - 1;\n            row = Math.floor(dataID / 10); \n        }\n        return [row, col];\n    },\n    cacheShipData(newShip, shipOrientation, originCoordinates) {\n        let [row, col] = originCoordinates;\n        const cachedCoordinates = [];\n        for (let i = 0; i < newShip.shipLength; i++) {\n            if (i == 0) cachedCoordinates.push(originCoordinates);\n            else {\n                if (shipOrientation === 'x') cachedCoordinates.push([row, ++col]);\n                else cachedCoordinates.push([++row, col]);\n            }\n        }\n        const dataObj = {\n            shipOrientation,\n            ship: newShip,\n            cachedCoordinates\n        }\n        this.cachedShips.push(dataObj);\n    },\n    validateInput(originCoordinates, shipLength) {\n        const [row, col] = originCoordinates;\n        if (this.currentOrientation === 'x') {\n           if (col + (shipLength - 1) > 9) return false;\n        } \n        else {\n            if (row + (shipLength - 1) > 9) return false;\n        }\n        return true;\n    },\n    placeShip(dataID, shipLength) {\n        const originCoordinates = this.convertToCoordinates(dataID);\n        const validInput = this.validateInput(originCoordinates, shipLength);\n\n        if (validInput) {\n            let [row, col] = originCoordinates;\n            const shipOrientation = this.currentOrientation;\n            let newShip;\n            if (shipOrientation === 'x') newShip = Ship(col, shipLength);\n            else newShip = Ship(row, shipLength);\n            this.cacheShipData(newShip, shipOrientation, originCoordinates);\n            for (let i = 0; i < shipLength; i++) {\n              if (i == 0) this.gameState[row][col] = 'o';\n              else {\n                if (shipOrientation === 'x') this.gameState[row][++col] = 'o';\n                else this.gameState[++row][col] = 'o';\n              }\n            }\n        }\n    },\n    recieveAttack(dataID) {\n        const attackCoordinates = this.convertToCoordinates(dataID);\n        const [row, col] = attackCoordinates;\n        if (this.gameState[row][col] === null) {\n            this.gameState[row][col] = 'x';\n        }\n        else if (this.gameState[row][col] === 'o') {\n            this.gameState[row][col] = '*';\n            let breakFromOuter = false;\n            for (let shipData of this.cachedShips) {\n                for (let xyPair of shipData.cachedCoordinates) {\n                    if (JSON.stringify(xyPair) === JSON.stringify(attackCoordinates)) {\n                        const ship = shipData.ship;\n                        if (shipData.shipOrientation === 'x') ship.hit(col);\n                        else ship.hit(row);\n                        breakFromOuter = true;\n                        break;\n                    }\n                }\n                if (breakFromOuter) break;\n            }\n        }\n    },\n    fleetDestroyed() {\n        for (let shipData of this.cachedShips) {\n            if (!shipData.ship.isSunk()) return false;\n        }\n        return true;\n    }\n};\n\nconst GameBoard = () => {\n    const gameState = [\n      [null, null, null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null, null, null],\n    ];\n    let currentOrientation = 'x';\n    const cachedShips = [];\n    return Object.create(GameBoardProto, {\n        gameState: {value: gameState},\n        currentOrientation: {\n            value: currentOrientation,\n            writable: true\n        },\n        cachedShips: {value: cachedShips} \n    })\n}\n\nexport {GameBoard};\n\n","const ShipProto =  {\n    // marks where the ship has been hit\n    hit(number) {\n        const shipRepArr = this.shipRep;\n        for(let i = 0; i < shipRepArr.length; i++) {\n            if (shipRepArr[i] === number) {\n                shipRepArr[i] = 'hit';\n            }\n        }\n    },\n    isSunk() {\n        const shipRepArr = this.shipRep;\n        for (let i = 0; i < shipRepArr.length; i++) {\n            if (shipRepArr[i] !== 'hit') return false;\n        }\n        return true;\n    }\n}\n\nconst Ship = (originInt, lenght) => {\n    const shipLength = length;\n    const shipRep = [];\n    for (let i = 0; i < shipLength; i++) {\n        shipRep.push(originInt);\n        originInt++;\n    }\n    return Object.create(ShipProto, {\n        shipLength: {value: shipLength},\n        shipRep: {value: shipRep}\n    });\n}\n\nexport {Ship};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { GameBoard } from \"./GameBoardLibrary\";\n\n// computer players must have access to available moves;\n// players must be able to change gameboard orientation;\n// players must be able to place ships;\n// players must be able to attack another board;\n// overall: players should be able to interact with gameboards\n\n// create a player object\n// create a computer object\n\n// for the computer to know whether it has sunk the user's ship\n// the user must tell the computer based on the user's board data;\n\nconst Player = () => {\n    return {\n        attack(dataID) {\n            compBoard.recieveAttack(dataID);\n        },\n        rotateShip() {\n            if (userBoard.currentOrientation === 'x') userBoard.currentOrientation = 'y';\n            else userBoard.currentOrientation = 'x';\n        }, \n        placeGamePiece(dataID, length) {\n            userBoard.placeShip(dataID, length);\n        },\n        queryHit(dataID) {\n            const [row, col] = userBoard.convertToCoordinates(dataID);\n            if (userBoard.gameState[row][col] === '*') return true;\n            return false;\n        },\n        querySink(dataID) {\n            \n        }\n    };\n}\n\nconst Computer = () => {\n    const availableMoves = [];\n    for (let i = 1; i <= 100; i++) {\n        availableMoves.push(i);\n    }\n    return { \n        availableMoves,\n        cachedHitAreas: [],\n        chooseMove() {\n            if (this.cachedHitAreas.length < 1) {\n                const randIndex = Math.floor(Math.random() * this.cachedHitAreas.length);\n                const dataID = this.availableMoves.splice(randIndex, 1)[0];\n                return dataID;\n            } \n            else {\n\n            }\n        },\n        attack() {\n            const dataID = chooseMove();\n            userBoard.recieveAttack(dataID);\n            const hit = user.queryHit(dataID);\n            if (hit) this.cachedHitAreas.push(dataID);\n        },\n        rotateShip() {\n\n        },\n        placeGamePiece() {\n\n        }\n    };\n}\n"],"names":[],"sourceRoot":""}