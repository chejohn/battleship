{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;AAAA,iEAAe,qBAAuB,0BAA0B;;;;;;;;;;;;;;ACAhE,iEAAe,qBAAuB,8BAA8B;;;;;;;;;;;;;;ACApE,iEAAe,qBAAuB,uBAAuB;;;;;;;;;;;;;;ACA7D,iEAAe,qBAAuB,yBAAyB;;;;;;;;;;;;;;ACA/D,iEAAe,qBAAuB,sBAAsB;;;;;;;;;;;;;;ACA5D,iEAAe,qBAAuB,sBAAsB;;;;;;;;;;;;;;ACA5D,iEAAe,qBAAuB,wBAAwB;;;;;;;;;;;;;;ACA9D,iEAAe,qBAAuB,uBAAuB;;;;;;;;;;;;;;ACA7D,iEAAe,qBAAuB,yBAAyB;;;;;;;;;;;ACA/D;;;;;;;;;;;;;;;;ACAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,0BAA0B,sBAAsB;AAChD;AACA;AACA;AACA,0BAA0B,sBAAsB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA,MAAM;AACN;AACA;AACA,0BAA0B,sBAAsB;AAChD;AACA;AACA;AACA;AACA,0BAA0B,sBAAsB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,2CAA2C,wDAAI;AAC/C,mBAAmB,wDAAI;AACvB;AACA,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA,KAAK;AACL,kBAAkB;AAClB,GAAG;AACH;;AAEA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;;;AClKiB;;AAE1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,UAAU;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B;;AAE/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2BAA2B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,yDAAa;AAClE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAE4B;;;;;;;;;;;;;;;;;AC3Jc;;AAE1C;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,yDAAa;AACpC;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC,kBAAkB,eAAe;AACjC,mBAAmB;AACnB,KAAK;AACL;;AAEA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;ACnCsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,aAAa;AACtD,MAAM;AACN,qCAAqC,YAAY;AACjD,kCAAkC,YAAY,GAAG,aAAa;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS,eAAe,YAAY;AACnF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,yDAAa;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA,+BAA+B,oBAAoB;AACnD,qDAAqD,UAAU;AAC/D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yDAAa;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,gBAAgB;AAC1C;AACA;AACA;AACA,UAAU;AACV,0BAA0B,gBAAgB;AAC1C;AACA;AACA,iCAAiC,oBAAoB;AACrD,uDAAuD,UAAU;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;;AAEA,iEAAe,cAAc,EAAC;;;;;;;;;;;;;;;;;;;ACvI9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,WAAW;AACxC,kBAAkB,UAAU;AAC5B;AACA,oCAAoC,EAAE;AACtC;AACA;AACA;AACA;;;;;;;;UC9BA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;;;;;;;;;;;;;;;;;;;;;ACf6B;AACQ;AACP;AACC;AACF;AACG;AACC;AACJ;AACG;AACF;AACmB;AACN;AACG;AACG;;AAEjD,kBAAkB,8DAAS;AAC3B,aAAa,uDAAM;AACnB,kBAAkB,8DAAS;AAC3B,aAAa,yDAAQ;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+DAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA,oCAAoC,4DAAc;AAClD;AACA;AACA,CAAC","sources":["webpack://battleship/./src/assets/battleShip.svg","webpack://battleship/./src/assets/battleShipLogo.png","webpack://battleship/./src/assets/carrier.svg","webpack://battleship/./src/assets/destroyer.svg","webpack://battleship/./src/assets/github.png","webpack://battleship/./src/assets/patrol.svg","webpack://battleship/./src/assets/soundOff.png","webpack://battleship/./src/assets/soundOn.png","webpack://battleship/./src/assets/submarine.svg","webpack://battleship/./src/styles/index.scss","webpack://battleship/./src/GameBoardLibrary.js","webpack://battleship/./src/PlayerLibrary.js","webpack://battleship/./src/ShipLibrary.js","webpack://battleship/./src/placeShipStage.js","webpack://battleship/./src/utilities.js","webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/global","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/webpack/runtime/make namespace object","webpack://battleship/webpack/runtime/publicPath","webpack://battleship/./src/index.js"],"sourcesContent":["export default __webpack_public_path__ + \"assets/battleShip.svg\";","export default __webpack_public_path__ + \"assets/battleShipLogo.png\";","export default __webpack_public_path__ + \"assets/carrier.svg\";","export default __webpack_public_path__ + \"assets/destroyer.svg\";","export default __webpack_public_path__ + \"assets/github.png\";","export default __webpack_public_path__ + \"assets/patrol.svg\";","export default __webpack_public_path__ + \"assets/soundOff.png\";","export default __webpack_public_path__ + \"assets/soundOn.png\";","export default __webpack_public_path__ + \"assets/submarine.svg\";","// extracted by mini-css-extract-plugin\nexport {};","import Ship from './ShipLibrary';\n// ship is represented by an 'o' on the gameboard\n// misssed hits are represented by an 'x' on the gameboard\n// attacked ships are represented by an '*' on the gameboard\nconst GameBoardProto = {\n  convertToCoordinates(dataID) {\n    let col;\n    let row;\n    if (dataID % 10 === 0) {\n      col = 9;\n      row = dataID / 10 - 1;\n    } else {\n      col = (dataID % 10) - 1;\n      row = Math.floor(dataID / 10);\n    }\n    return [row, col];\n  },\n  \n  cacheShipData(newShip, shipOrientation, originCoordinates) {\n    let [row, col] = originCoordinates;\n    const cachedCoordinates = [];\n    for (let i = 0; i < newShip.shipLength; i++) {\n      if (i == 0) cachedCoordinates.push(originCoordinates);\n      else {\n        if (shipOrientation === 'x') cachedCoordinates.push([row, ++col]);\n        else cachedCoordinates.push([++row, col]);\n      }\n    }\n    const dataObj = {\n      shipOrientation,\n      ship: newShip,\n      cachedCoordinates,\n    };\n    this.cachedShips.push(dataObj);\n  },\n\n  validateInput(originCoordinates, shipLength) {\n    const [row, col] = originCoordinates;\n    if (this.currentOrientation === 'x') {\n      if (col + (shipLength - 1) > 9) return false;\n      if (row - 1 >= 0) {\n        for (let i = col; i < col + shipLength; i++)\n          if (this.gameState[row - 1][i] === 'o') return false;\n      }\n      if (row + 1 <= 9) {\n        for (let i = col; i < col + shipLength; i++)\n          if (this.gameState[row + 1][i] === 'o') return false;\n      }\n      if (col - 1 >= 0) {\n        if (this.gameState[row][col - 1] === 'o') return false;\n      }\n      if (col + shipLength <= 9) {\n        if (this.gameState[row][col + shipLength] === 'o') return false;\n      }\n      for (let i = col; i < col + shipLength; i++)\n        if (this.gameState[row][i] === 'o') return false;\n    } else {\n      if (row + (shipLength - 1) > 9) return false;\n      if (col - 1 >= 0) {\n        for (let i = row; i < row + shipLength; i++) {\n          if (this.gameState[i][col - 1] === 'o') return false;\n        }\n      }\n      if (col + 1 <= 9) {\n        for (let i = row; i < row + shipLength; i++)\n          if (this.gameState[i][col + 1] === 'o') return false;\n      }\n      if (row - 1 >= 0) {\n        if (this.gameState[row - 1][col] === 'o') return false;\n      }\n      if (row + shipLength <= 9) {\n        if (this.gameState[row + shipLength][col] === 'o') return false;\n      }\n      for (let i = row; i < row + shipLength; i++)\n        if (this.gameState[i][col] === 'o') return false;\n    }\n    return true;\n  },\n\n  placeShip(dataID, shipName) {\n    const originCoordinates = this.convertToCoordinates(dataID);\n    let [row, col] = originCoordinates;\n    const shipOrientation = this.currentOrientation;\n    let newShip;\n    if (shipOrientation === 'x') newShip = Ship(col, shipName);\n    else newShip = Ship(row, shipName);\n    this.cacheShipData(newShip, shipOrientation, originCoordinates);\n    for (let i = 0; i < newShip.shipLength; i++) {\n      if (i == 0) this.gameState[row][col] = 'o';\n      else {\n        if (shipOrientation === 'x') this.gameState[row][++col] = 'o';\n        else this.gameState[++row][col] = 'o';\n      }\n    }\n  },\n\n  recieveAttack(dataID) {\n    const attackCoordinates = this.convertToCoordinates(dataID);\n    const [row, col] = attackCoordinates;\n    if (this.gameState[row][col] === null) {\n      this.gameState[row][col] = 'x';\n    } else if (this.gameState[row][col] === 'o') {\n      this.gameState[row][col] = '*';\n      let breakFromOuter = false;\n      for (let shipData of this.cachedShips) {\n        for (let xyPair of shipData.cachedCoordinates) {\n          if (JSON.stringify(xyPair) === JSON.stringify(attackCoordinates)) {\n            const ship = shipData.ship;\n            if (shipData.shipOrientation === 'x') ship.hit(col);\n            else ship.hit(row);\n            breakFromOuter = true;\n            break;\n          }\n        }\n        if (breakFromOuter) break;\n      }\n    }\n  },\n\n  fleetDestroyed() {\n    for (let shipData of this.cachedShips) {\n      if (!shipData.ship.isSunk()) return false;\n    }\n    return true;\n  },\n\n  returnCurrentAxis() {\n    return this.currentOrientation;\n  },\n\n  changeOrientation() {\n    if (this.currentOrientation === 'x') this.currentOrientation = 'y';\n    else  this.currentOrientation = 'x';\n  }\n}\n\nconst GameBoard = () => {\n  const gameState = [\n    [null, null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null, null],\n  ];\n  let currentOrientation = 'x';\n  const cachedShips = [];\n\n  return Object.create(GameBoardProto, {\n    gameState: {value: gameState},\n    currentOrientation: {\n      value: currentOrientation,\n      writable: true\n    },\n    cachedShips: {value: cachedShips}\n  })\n}\n\nexport default GameBoard;\n\n\n","import {getShipLength} from \"./utilities\";\n\nconst Player = (userBoard) => {\n  const availableShips = ['patrol boat','submarine','destroyer','battleship','carrier'];\n  \n  const attack = (dataID, compBoard) => {\n    compBoard.recieveAttack(dataID);\n  };\n\n  const rotateShip = () => {\n    userBoard.changeOrientation();\n  };\n\n  const placeGamePiece = (dataID) => {\n    const shipName = availableShips.pop();\n    userBoard.placeShip(dataID, shipName);\n  };\n\n  const queryHit = (dataID) => {\n    const [row, col] = userBoard.convertToCoordinates(dataID);\n    if (userBoard.gameState[row][col] === '*') return true;\n    return false;\n  };\n\n  const querySink = (dataID) => {\n    const attackCoordinates = userBoard.convertToCoordinates(dataID);\n    for (let shipData of userBoard.cachedShips) {\n      for (let coordinates of shipData.cachedCoordinates) {\n        if (JSON.stringify(attackCoordinates) === JSON.stringify(coordinates)) {\n          return shipData.ship.isSunk();\n        }\n      }\n    }\n  };\n  return {\n    attack,\n    rotateShip,\n    placeGamePiece,\n    queryHit,\n    querySink,\n    availableShips\n  };\n};\n\nconst Computer = (compBoard, user) => {\n  const availableMoves = [];\n  for (let i = 1; i <= 100; i++) {\n    availableMoves.push(i);\n  }\n  const operandData = {\n    operands: [-1, 1, -10, 10],\n    currOperand: null,\n    effectiveOperand: null,\n  };\n  let tempHitAreas = [];\n\n  const validDataID = (hitArea, operand = 0) => {\n    let aleredOperand;\n    if (operand % 10 === 0 || operand % 10 === -0) aleredOperand = operand/10;\n    const [row, col] = compBoard.convertToCoordinates(hitArea);\n  \n    if (operand === 1 || operand === -1) {\n        if (col + operand < 0 || col + operand > 9) return false;\n    }\n    if (operand === 10 || operand === -10) {\n        if (row + aleredOperand < 0 || row + aleredOperand > 9) return false;\n    }\n    for (let move of availableMoves) {\n        if (move === hitArea + operand) return true;\n    }\n    return false;\n  }\n\n  const negateOperand = () => {operandData.currOperand = -1 * operandData.currOperand;}\n\n  const addToOriginHitArea = () => {\n    const dataID = tempHitAreas[0] + operandData.currOperand;\n    return dataID;\n  }\n\n  const chooseMove = () => {\n      let dataID;\n      if (tempHitAreas.length < 1) {\n          const randIndex = Math.floor(Math.random() * availableMoves.length);\n          dataID = availableMoves.splice(randIndex, 1)[0];\n      }\n      else if (tempHitAreas.length <= 1) {\n        const operands = operandData.operands;\n        while(!validDataID(tempHitAreas[0], operands[operands.length - 1])) {\n          operands.pop();\n        }\n        operandData.currOperand = operands.pop();\n        dataID = addToOriginHitArea();\n      } else {\n          if (operandData.effectiveOperand) dataID = tempHitAreas[tempHitAreas.length - 1] + operandData.currOperand;\n          else {\n              negateOperand();\n              dataID = addToOriginHitArea();\n          }\n          if (!validDataID(dataID)) {\n            negateOperand();\n            dataID = addToOriginHitArea(); \n          }\n      }\n      for (let i = 0; i < availableMoves.length; i++) {\n          if (availableMoves[i] === dataID) {\n              availableMoves.splice(i, 1);\n              break;\n          }\n      }\n      return dataID;\n  };\n\n  const attack = (userBoard) => {\n    const dataID = chooseMove();\n    userBoard.recieveAttack(dataID);\n    const hit = user.queryHit(dataID);\n    if (hit) {\n        const sunk = user.querySink(dataID);\n        if (sunk) {\n            operandData.operands = [-1, 1, -10, 10];\n            operandData.currOperand = null;\n            operandData.effectiveOperand = null;\n            tempHitAreas = [];\n        } else {\n            tempHitAreas.push(dataID);\n            if (tempHitAreas.length > 1) operandData.effectiveOperand = true;\n        }\n    }\n    else if (!hit && tempHitAreas.length > 1) operandData.effectiveOperand = false;\n  };\n\n  const rotateShip = () => {\n    if (Math.random() < 0.5) compBoard.changeOrientation();\n  };\n\n  const placeGamePieces = () => {\n    const ships= ['patrol boat', 'submarine', 'destroyer', 'battleship', 'carrier'];\n    while (ships.length > 0) {\n      const randDataID = Math.floor(Math.random() * 100) + 1;\n      const originCoordinates = compBoard.convertToCoordinates(randDataID);\n      rotateShip();\n      if (compBoard.validateInput(originCoordinates, getShipLength(ships[ships.length-1]))) {\n          compBoard.placeShip(randDataID, ships.pop());\n      }\n    }\n  };\n\n  return {\n    attack,\n    rotateShip,\n    placeGamePieces,\n  };\n};\n\nexport { Player, Computer };\n\n","import {getShipLength} from \"./utilities\";\n\nconst ShipProto =  {\n    hit(number) {\n        const shipRepArr = this.shipRep;\n        for(let i = 0; i < shipRepArr.length; i++) {\n            if (shipRepArr[i] === number) {\n                shipRepArr[i] = 'hit';\n            }\n        }\n    },\n    isSunk() {\n        const shipRepArr = this.shipRep;\n        for (let i = 0; i < shipRepArr.length; i++) {\n            if (shipRepArr[i] !== 'hit') return false;\n        }\n        return true;\n    }\n}\n\nconst Ship = (originInt, name) => {\n    const shipLength = getShipLength(name);\n    const shipName = name;\n    const shipRep = [];\n    for (let i = 0; i < shipLength; i++) {\n        shipRep.push(originInt);\n        originInt++;\n    }\n    return Object.create(ShipProto, {\n        shipLength: {value: shipLength},\n        shipRep: {value: shipRep},\n        shipName: {value: shipName}\n    });\n}\n\nexport default Ship;\n","import {getShipLength} from './utilities';\n/*\n  params: user obj, userBoard obj\n  returns: an array of userBoardGUI event listeners\n*/\nconst placeShipStage = (user, userBoard) => {\n  const formatImageElement = (imageElement, axisPosition, currentShip) => {\n    if (currentShip === 'patrol boat') {\n      imageElement.src = './assets/patrol.svg';\n      imageElement.className = `patrol-${axisPosition}`;\n    } else {\n      imageElement.src = `./assets/${currentShip}.svg`;\n      imageElement.className = `${currentShip}-${axisPosition}`;\n    }\n    imageElement.classList.add('ship-image');\n  };\n\n  const alterGameMessage = (availableShips) => {\n    if (availableShips.length > 0) {\n      const gameMessage = GlobalNodes.gameMessage.textContent;\n      const currentShip = availableShips[availableShips.length - 1];\n      const userName = gameMessage.substr(0, gameMessage.indexOf(','));\n      GlobalNodes.gameMessage.textContent = `${userName}, place your ${currentShip}`;\n    }\n  };\n\n  const toggleAxisGUI = (e) => {\n    const axisBttn = e.target;\n    user.rotateShip();\n    if (userBoard.returnCurrentAxis() === 'x')\n      axisBttn.textContent = 'axis: x';\n    else axisBttn.textContent = 'axis: y';\n  };\n\n  const hoverEffect = (e) => {\n    const availableShips = user.availableShips;\n    const axisPosition = userBoard.returnCurrentAxis();\n    let cell = e.target;\n    const currShipLength = getShipLength(\n      availableShips[availableShips.length - 1]\n    );\n    const originCoordinates = userBoard.convertToCoordinates(\n      Number(cell.getAttribute('data-id'))\n    );\n\n    if (!userBoard.validateInput(originCoordinates, currShipLength)) {\n      if (e.type === 'mouseover') {\n        cell.style.background = 'rgba(255, 60, 60, 0.6)';\n        cell.style.cursor = 'not-allowed';\n      } else if (e.type === 'mouseout') {\n        cell.style.background = 'transparent';\n        cell.style.cursor = 'pointer';\n      }\n    } else {\n      let cellColor;\n      if (axisPosition === 'x') {\n        if (e.type === 'mouseover') cellColor = 'lightgrey';\n        else if (e.type === 'mouseout') cellColor = 'transparent';\n        for (let i = 0; i < currShipLength; i++) {\n          cell.style.background = cellColor;\n          cell = cell.nextElementSibling;\n        }\n      } else if (axisPosition === 'y') {\n        if (e.type === 'mouseover') cellColor = 'lightgrey';\n        else if (e.type === 'mouseout') cellColor = 'transparent';\n        for (let i = 0; i < currShipLength; i++) {\n          cell.style.background = cellColor;\n          const dataID = cell.getAttribute('data-id');\n          const newDataID = `${Number(dataID) + 10}`;\n          cell = document.querySelector(`[data-id='${newDataID}']`);\n        }\n      }\n    }\n  };\n\n  const placeShipGUI = (e) => {\n    if (e.target.hasAttribute('data-id')) {\n      const originCell = e.target;\n      const dataID = Number(originCell.getAttribute('data-id'));\n      const originCoordinates = userBoard.convertToCoordinates(dataID);\n      const currentShip = user.availableShips[user.availableShips.length - 1];\n      const shipLength = getShipLength(currentShip);\n\n      if (userBoard.validateInput(originCoordinates, shipLength) === true) {\n        user.placeGamePiece(dataID);\n        originCell.style.position = 'relative';\n        const axisPosition = userBoard.returnCurrentAxis();\n        const imageElement = document.createElement('img');\n        imageElement.alt = '';\n        formatImageElement(imageElement, axisPosition, currentShip);\n        let cell = originCell;\n        if (axisPosition === 'x') {\n          for (let i = 0; i < shipLength; i++) {\n            cell.style.background = 'transparent';\n            cell = cell.nextElementSibling;\n          }\n        } else {\n          for (let i = 0; i < shipLength; i++) {\n            cell.style.background = 'transparent';\n            const dataID = cell.getAttribute('data-id');\n            const newDataID = `${Number(dataID) + 10}`;\n            cell = document.querySelector(`[data-id='${newDataID}']`);\n          }\n        }\n        originCell.appendChild(imageElement);\n        alterGameMessage(user.availableShips);\n      }\n    }\n  };\n\n  const GlobalNodes = (() => {\n    const axisBttn = document.querySelector('.bttn-orientation');\n    const gameBoardCells = document.querySelectorAll('.user-gameboard > *');\n    const gameBoard = document.querySelector('.user-gameboard');\n    const gameMessage = document.querySelector('.placeShip-message');\n    return {\n      axisBttn,\n      gameBoardCells,\n      gameBoard,\n      gameMessage,\n    };\n  })();\n\n  const AddEventHandlers = (() => {\n    GlobalNodes.axisBttn.addEventListener('click', toggleAxisGUI);\n    GlobalNodes.gameBoardCells.forEach((cell) => {\n      cell.addEventListener('mouseover', hoverEffect);\n      cell.addEventListener('mouseout', hoverEffect);\n    });\n    GlobalNodes.gameBoard.addEventListener('click', placeShipGUI);\n  })();\n\n  return [hoverEffect, placeShipGUI]\n}\n\nexport default placeShipStage;\n\n\n\n","const getShipLength = (shipName) => {\n  let shipLength;\n  switch (shipName) {\n    case 'patrol boat':\n      shipLength = 2;\n      break;\n    case 'destroyer':\n    case 'submarine':\n      shipLength = 3;\n      break;\n    case 'battleship':\n      shipLength = 4;\n      break;\n    case 'carrier':\n      shipLength = 5;\n      break;\n  }\n  return shipLength;\n};\n\nconst createGameBoardGUI = (playerKind) => {\n  const gameBoard = document.createElement('div');\n  gameBoard.classList.add('gameboard');\n  gameBoard.classList.add(`${playerKind}-board`);\n  for (let i = 1; i <= 100; i++) {\n    const cell = document.createElement('div');\n    cell.setAttribute('data-id', `${i}`);\n    gameBoard.appendChild(cell);\n  }\n  return gameBoard;\n}\n\nexport {\n  getShipLength,\n  createGameBoardGUI\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import './styles/index.scss';\nimport './assets/battleShipLogo.png';\nimport './assets/soundOn.png';\nimport './assets/soundOff.png';\nimport './assets/github.png';\nimport './assets/destroyer.svg';\nimport './assets/battleShip.svg';\nimport './assets/patrol.svg';\nimport './assets/submarine.svg';\nimport './assets/carrier.svg';\nimport {Player, Computer} from './PlayerLibrary';\nimport GameBoard from './GameBoardLibrary';\nimport placeShipStage from './placeShipStage'; \nimport { createGameBoardGUI } from './utilities';\n\nconst userBoard = GameBoard();\nconst user = Player(userBoard);\nconst compBoard = GameBoard();\nconst comp = Computer(compBoard, user);\n\n/*\n    params: hoverEffect and placeShipGUI event handlers\n    return: void\n    task: remove placeShipStage event listeners; \n*/\nconst transitionToGamePlay = (hoverEffect, placeShipGUI) => {\n    const GlobalNodes = (() => {\n        const userBoardGUI = document.querySelector('.user-gameboard');\n        const gameBoardCells = document.querySelectorAll('.user-gameboard > *');\n        const axisBttn = document.querySelector('.bttn-orientation');\n        const main = document.querySelector('main');\n        const compBoardGUI = createGameBoardGUI('comp');\n        return {\n            userBoardGUI,\n            gameBoardCells,\n            axisBttn,\n            main,\n            compBoardGUI\n        }\n    })();\n    const removeEventHandlers = (() => {\n        GlobalNodes.gameBoardCells.forEach((cell) => {\n            cell.removeEventListener('mouseover', hoverEffect);\n            cell.removeEventListener('moseout', hoverEffect);\n        });\n        GlobalNodes.userBoardGUI.removeEventListener('click', placeShipGUI);\n    })();\n    const insertGameConsole = () => {\n      const console = document.createElement('div');\n      console.className = 'game-console';\n      console.textContent = 'Awaiting Orders, Admiral Ché';\n      GlobalNodes.main.appendChild(console);\n    };\n    const createContainer = (className) => {\n        const container = document.createElement('div');\n        container.className = className;\n        return container;\n    }\n    const prepareThirdModule = (() => {\n        const userBoard = GlobalNodes.userBoardGUI;\n        document.querySelector('.placeShip-message').remove();\n        document.querySelector('.bttn-orientation').remove();\n        userBoard.remove();\n        insertGameConsole();\n\n        const gbContainer = createContainer('gameBoard-container');\n        GlobalNodes.main.appendChild(gbContainer);\n\n        const gbSubContainer = createContainer('gb-subcontainer');\n        const gbSubContainer2 = createContainer('gb-subcontainer');\n        gbContainer.appendChild(gbSubContainer);\n        gbContainer.appendChild(gbSubContainer2);\n\n        const gbHeader = document.createElement('p');\n        gbHeader.textContent = 'Friendly waters';\n        gbSubContainer.appendChild(gbHeader);\n        gbSubContainer.appendChild(userBoard);\n\n        const gbHeader2 = document.createElement('p');\n        gbHeader2.textContent = 'Enemy waters';\n        gbSubContainer2.appendChild(gbHeader2);\n        gbSubContainer2.appendChild(GlobalNodes.compBoardGUI);\n    })();\n    const styleBoards = (() => {\n        GlobalNodes.userBoardGUI.style.cursor = 'default';\n        GlobalNodes.compBoardGUI.style.cursor = 'crosshair';\n    })();\n}\n\nconst [hoverEffect, placeShipGUI] = placeShipStage(user, userBoard);\nsetTimeout(() => {\n    transitionToGamePlay(hoverEffect, placeShipGUI);\n}, 10000);\n\n"],"names":[],"sourceRoot":""}