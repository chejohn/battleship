{"version":3,"file":"main.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC,kBAAkB;AAClB,KAAK;AACL;;AAEc;;;;;;;UChCd;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;ACNsB;AACa;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,+CAA+C,kDAAI;AACnD,uBAAuB,kDAAI;AAC3B;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C,6BAA6B,0BAA0B;AACvD,sBAAsB;AACtB,KAAK;AACL;;AAEmB","sources":["webpack://battleship/./src/index.scss","webpack://battleship/./src/shipLibrary.js","webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/webpack/runtime/make namespace object","webpack://battleship/./src/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","const ShipProto =  {\n    // marks where the ship has been hit\n    hit(number) {\n        const shipRepArr = this.shipRep;\n        for(let i = 0; i < shipRepArr.length; i++) {\n            if (shipRepArr[i] === number) {\n                shipRepArr[i] = 'hit';\n            }\n        }\n    },\n    isSunk() {\n        const shipRepArr = this.shipRep;\n        for (let i = 0; i < shipRepArr.length; i++) {\n            if (shipRepArr[i] !== 'hit') return false;\n        }\n        return true;\n    }\n}\n\nconst Ship = (originInt, length) => {\n    const shipLength = length;\n    const shipRep = [];\n    for (let i = 0; i < shipLength; i++) {\n        shipRep.push(originInt);\n        originInt++;\n    }\n    return Object.create(ShipProto, {\n        shipLength: {value: shipLength},\n        shipRep: {value: shipRep}\n    });\n}\n\nexport {Ship};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './index.scss';\nimport {Ship} from './shipLibrary';\n// ship is represented by an 'o' on the gameboard\n// misssed hits are represented by an 'x' on the gameboard\n\nconst GameBoardProto = {\n    convertToCoordinates(int) {\n        const col = (int % 10) - 1;\n        const row = Math.floor(int / 10); \n        return [row, col];\n    },\n    cacheShip(newShip, shipOrientation, originCoordinates) {\n        let [row, col] = originCoordinates;\n        const cachedCoordinates = [];\n        for (let i = 0; i < newShip.shipLength; i++) {\n            if (i == 0) cachedCoordinates.push(originCoordinates);\n            else {\n                if (shipOrientation === 'x') cachedCoordinates.push([row, ++col]);\n                else cachedCoordinates.push([++row, col]);\n            }\n        }\n        const dataObj = {\n            shipOrientation,\n            newShip,\n            cachedCoordinates\n        }\n        this.cachedShips.push(dataObj);\n    },\n    placeShip(dataID, shipLength) {\n        const originCoordinates = this.convertToCoordinates(dataID);\n        let [row, col] = originCoordinates;\n        const shipOrientation = this.currentOrientation;\n        let newShip;\n        if (shipOrientation === 'x') newShip = Ship(originCoordinates[1], shipLength);\n        else newShip = Ship(originCoordinates[0], shipLength);\n        this.cacheShip(newShip, shipOrientation, originCoordinates);\n        for(let i = 0; i < shipLength; i++) {\n            if (i == 0) this.gameBoardRep[row][col] = 'o';\n            else {\n                if (shipOrientation === 'x') this.gameBoardRep[row][++col] = 'o';\n                else this.gameBoardRep[++row][col] = 'o';\n            }\n        }\n    },\n    recieveAttack() {\n\n    }\n};\n\nconst GameBoard = () => {\n    const gameBoardRep = [\n      [null, null, null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null, null, null],\n    ];\n    const currentOrientation = 'x';\n    const cachedShips = [];\n    return Object.create(GameBoardProto, {\n        gameBoardRep: {value: gameBoardRep},\n        currentOrientation: {value: currentOrientation},\n        cachedShips: {value: cachedShips} \n    })\n}\n\nexport {GameBoard};\n"],"names":[],"sourceRoot":""}